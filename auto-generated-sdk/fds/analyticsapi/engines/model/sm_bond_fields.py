"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
    Contact: api@factset.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fds.analyticsapi.engines.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from fds.analyticsapi.engines.model.sm_fields import SMFields
    globals()['SMFields'] = SMFields


class SMBondFields(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('security_type',): {
            'BOND': "Bond",
            'CCF': "CCF",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'security_type': (str,),  # noqa: E501
            '_144a_flag': (bool,),  # noqa: E501
            'aperiodic_multipliers': ([float],),  # noqa: E501
            'aperiodic_reset_dates': ([str],),  # noqa: E501
            'aperiodic_spreads': ([float],),  # noqa: E501
            'business_day_conv': (str,),  # noqa: E501
            'call_announced_date': (str,),  # noqa: E501
            'call_dates': ([str],),  # noqa: E501
            'call_freq': (str,),  # noqa: E501
            'call_notice_days': (int,),  # noqa: E501
            'call_prices': ([float],),  # noqa: E501
            'cash_rate': (float,),  # noqa: E501
            'cognity': (str,),  # noqa: E501
            'conversion_identifier': (str,),  # noqa: E501
            'conversion_ratio': (float,),  # noqa: E501
            'conversion_type': (str,),  # noqa: E501
            'convertible_flag': (bool,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'coupon': (float,),  # noqa: E501
            'coupon_type': (str,),  # noqa: E501
            'credit_spread_adjustment_single': (float,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'day_count_basis': (str,),  # noqa: E501
            'defaulted_date': (str,),  # noqa: E501
            'federal_tax_exempt_flag': (bool,),  # noqa: E501
            'first_pay_date': (str,),  # noqa: E501
            'first_reset_date': (str,),  # noqa: E501
            'float_formula': (str,),  # noqa: E501
            'flt_day_count_basis': (str,),  # noqa: E501
            'flt_first_pay_date': (str,),  # noqa: E501
            'flt_pay_freq': (str,),  # noqa: E501
            'hist_coupon_dates': ([str],),  # noqa: E501
            'hist_coupons': ([float],),  # noqa: E501
            'hist_rcv_assump_dates': ([str],),  # noqa: E501
            'hist_rcv_assump_months': ([int],),  # noqa: E501
            'hist_rcv_assump_rates': ([float],),  # noqa: E501
            'hist_rcv_assump_target_dates': ([str],),  # noqa: E501
            'inflation_type': (str,),  # noqa: E501
            'issue_date': (str,),  # noqa: E501
            'issue_name': (str,),  # noqa: E501
            'issuer_id': (str,),  # noqa: E501
            'last_modified_source': (str,),  # noqa: E501
            'last_modified_source_meta': (str,),  # noqa: E501
            'last_modified_time': (str,),  # noqa: E501
            'life_cap': (float,),  # noqa: E501
            'life_floor': (float,),  # noqa: E501
            'lockout_days': (int,),  # noqa: E501
            'look_back_days': (int,),  # noqa: E501
            'make_whole_call_flag': (bool,),  # noqa: E501
            'make_whole_expire_date': (str,),  # noqa: E501
            'make_whole_spread': (float,),  # noqa: E501
            'matrix_dates': ([str],),  # noqa: E501
            'matrix_multipliers': ([float],),  # noqa: E501
            'matrix_priced_flag': (bool,),  # noqa: E501
            'matrix_spreads': ([float],),  # noqa: E501
            'matrix_use_schedule_flag': (bool,),  # noqa: E501
            'maturity_date': (str,),  # noqa: E501
            'maturity_price': (float,),  # noqa: E501
            'months_to_recovery': (float,),  # noqa: E501
            'multiplier': (float,),  # noqa: E501
            'notional_flag': (bool,),  # noqa: E501
            'observation_shift': (int,),  # noqa: E501
            'orig_amt_issued': (float,),  # noqa: E501
            'parent_name': (str,),  # noqa: E501
            'par_price': (float,),  # noqa: E501
            'parser_info': (str,),  # noqa: E501
            'payment_delay': (int,),  # noqa: E501
            'pay_freq': (str,),  # noqa: E501
            'period_cap': (float,),  # noqa: E501
            'period_floor': (float,),  # noqa: E501
            'pik_exp_date': (str,),  # noqa: E501
            'pik_rate': (int,),  # noqa: E501
            'preferred_sec_ex_date_len': (int,),  # noqa: E501
            'preferred_sec_ex_date_units': (str,),  # noqa: E501
            'preferred_sec_flag': (bool,),  # noqa: E501
            'preferred_sec_type': (str,),  # noqa: E501
            'principal_type': (str,),  # noqa: E501
            'put_dates': ([str],),  # noqa: E501
            'put_notice_days': (int,),  # noqa: E501
            'put_freq': (str,),  # noqa: E501
            'put_prices': ([float],),  # noqa: E501
            'pvt_placement_flag': (bool,),  # noqa: E501
            'rating_fitch': (str,),  # noqa: E501
            'rating_fitch_dates': ([str],),  # noqa: E501
            'rating_fitch_values': ([str],),  # noqa: E501
            'rating_moodys_dates': ([str],),  # noqa: E501
            'rating_moodys_values': ([str],),  # noqa: E501
            'rating_sp_dates': ([str],),  # noqa: E501
            'rating_sp_values': ([str],),  # noqa: E501
            'recovery_percentage': (float,),  # noqa: E501
            'redemption_date': (str,),  # noqa: E501
            'redemption_opt': (str,),  # noqa: E501
            'redemption_price': (float,),  # noqa: E501
            'reinstated_date': (str,),  # noqa: E501
            'reset_delay': (int,),  # noqa: E501
            'reset_freq': (str,),  # noqa: E501
            'ref_index': (str,),  # noqa: E501
            'secondary_to_vendor_flag': (bool,),  # noqa: E501
            'sector': (str,),  # noqa: E501
            'sector_barclay1': (str,),  # noqa: E501
            'sector_barclay2': (str,),  # noqa: E501
            'sector_barclay3': (str,),  # noqa: E501
            'sector_barclay4': (str,),  # noqa: E501
            'sector_def': (str,),  # noqa: E501
            'sector_industry': (str,),  # noqa: E501
            'sector_main': (str,),  # noqa: E501
            'sector_merrill1': (str,),  # noqa: E501
            'sector_merrill2': (str,),  # noqa: E501
            'sector_merrill3': (str,),  # noqa: E501
            'sector_merrill4': (str,),  # noqa: E501
            'sector_sub_group': (str,),  # noqa: E501
            'sink_amts': ([float],),  # noqa: E501
            'sink_dates': ([str],),  # noqa: E501
            'spread': (float,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'status_dates': ([str],),  # noqa: E501
            'status_values': ([str],),  # noqa: E501
            'step_cash_rates': ([float],),  # noqa: E501
            'step_coupon_dates': ([str],),  # noqa: E501
            'step_coupons': ([float],),  # noqa: E501
            'step_pik_rates': ([float],),  # noqa: E501
            'vendor_coverage_date': (str,),  # noqa: E501
            'v_rdn_flag': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'security_type': 'securityType',  # noqa: E501
        '_144a_flag': '144aFlag',  # noqa: E501
        'aperiodic_multipliers': 'aperiodicMultipliers',  # noqa: E501
        'aperiodic_reset_dates': 'aperiodicResetDates',  # noqa: E501
        'aperiodic_spreads': 'aperiodicSpreads',  # noqa: E501
        'business_day_conv': 'businessDayConv',  # noqa: E501
        'call_announced_date': 'callAnnouncedDate',  # noqa: E501
        'call_dates': 'callDates',  # noqa: E501
        'call_freq': 'callFreq',  # noqa: E501
        'call_notice_days': 'callNoticeDays',  # noqa: E501
        'call_prices': 'callPrices',  # noqa: E501
        'cash_rate': 'cashRate',  # noqa: E501
        'cognity': 'cognity',  # noqa: E501
        'conversion_identifier': 'conversionIdentifier',  # noqa: E501
        'conversion_ratio': 'conversionRatio',  # noqa: E501
        'conversion_type': 'conversionType',  # noqa: E501
        'convertible_flag': 'convertibleFlag',  # noqa: E501
        'country': 'country',  # noqa: E501
        'coupon': 'coupon',  # noqa: E501
        'coupon_type': 'couponType',  # noqa: E501
        'credit_spread_adjustment_single': 'creditSpreadAdjustmentSingle',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'day_count_basis': 'dayCountBasis',  # noqa: E501
        'defaulted_date': 'defaultedDate',  # noqa: E501
        'federal_tax_exempt_flag': 'federalTaxExemptFlag',  # noqa: E501
        'first_pay_date': 'firstPayDate',  # noqa: E501
        'first_reset_date': 'firstResetDate',  # noqa: E501
        'float_formula': 'floatFormula',  # noqa: E501
        'flt_day_count_basis': 'fltDayCountBasis',  # noqa: E501
        'flt_first_pay_date': 'fltFirstPayDate',  # noqa: E501
        'flt_pay_freq': 'fltPayFreq',  # noqa: E501
        'hist_coupon_dates': 'histCouponDates',  # noqa: E501
        'hist_coupons': 'histCoupons',  # noqa: E501
        'hist_rcv_assump_dates': 'histRcvAssumpDates',  # noqa: E501
        'hist_rcv_assump_months': 'histRcvAssumpMonths',  # noqa: E501
        'hist_rcv_assump_rates': 'histRcvAssumpRates',  # noqa: E501
        'hist_rcv_assump_target_dates': 'histRcvAssumpTargetDates',  # noqa: E501
        'inflation_type': 'inflationType',  # noqa: E501
        'issue_date': 'issueDate',  # noqa: E501
        'issue_name': 'issueName',  # noqa: E501
        'issuer_id': 'issuerId',  # noqa: E501
        'last_modified_source': 'lastModifiedSource',  # noqa: E501
        'last_modified_source_meta': 'lastModifiedSourceMeta',  # noqa: E501
        'last_modified_time': 'lastModifiedTime',  # noqa: E501
        'life_cap': 'lifeCap',  # noqa: E501
        'life_floor': 'lifeFloor',  # noqa: E501
        'lockout_days': 'lockoutDays',  # noqa: E501
        'look_back_days': 'lookBackDays',  # noqa: E501
        'make_whole_call_flag': 'makeWholeCallFlag',  # noqa: E501
        'make_whole_expire_date': 'makeWholeExpireDate',  # noqa: E501
        'make_whole_spread': 'makeWholeSpread',  # noqa: E501
        'matrix_dates': 'matrixDates',  # noqa: E501
        'matrix_multipliers': 'matrixMultipliers',  # noqa: E501
        'matrix_priced_flag': 'matrixPricedFlag',  # noqa: E501
        'matrix_spreads': 'matrixSpreads',  # noqa: E501
        'matrix_use_schedule_flag': 'matrixUseScheduleFlag',  # noqa: E501
        'maturity_date': 'maturityDate',  # noqa: E501
        'maturity_price': 'maturityPrice',  # noqa: E501
        'months_to_recovery': 'monthsToRecovery',  # noqa: E501
        'multiplier': 'multiplier',  # noqa: E501
        'notional_flag': 'notionalFlag',  # noqa: E501
        'observation_shift': 'observationShift',  # noqa: E501
        'orig_amt_issued': 'origAmtIssued',  # noqa: E501
        'parent_name': 'parentName',  # noqa: E501
        'par_price': 'parPrice',  # noqa: E501
        'parser_info': 'parserInfo',  # noqa: E501
        'payment_delay': 'paymentDelay',  # noqa: E501
        'pay_freq': 'payFreq',  # noqa: E501
        'period_cap': 'periodCap',  # noqa: E501
        'period_floor': 'periodFloor',  # noqa: E501
        'pik_exp_date': 'pikExpDate',  # noqa: E501
        'pik_rate': 'pikRate',  # noqa: E501
        'preferred_sec_ex_date_len': 'preferredSecExDateLen',  # noqa: E501
        'preferred_sec_ex_date_units': 'preferredSecExDateUnits',  # noqa: E501
        'preferred_sec_flag': 'preferredSecFlag',  # noqa: E501
        'preferred_sec_type': 'preferredSecType',  # noqa: E501
        'principal_type': 'principalType',  # noqa: E501
        'put_dates': 'putDates',  # noqa: E501
        'put_notice_days': 'putNoticeDays',  # noqa: E501
        'put_freq': 'putFreq',  # noqa: E501
        'put_prices': 'putPrices',  # noqa: E501
        'pvt_placement_flag': 'pvtPlacementFlag',  # noqa: E501
        'rating_fitch': 'ratingFitch',  # noqa: E501
        'rating_fitch_dates': 'ratingFitchDates',  # noqa: E501
        'rating_fitch_values': 'ratingFitchValues',  # noqa: E501
        'rating_moodys_dates': 'ratingMoodysDates',  # noqa: E501
        'rating_moodys_values': 'ratingMoodysValues',  # noqa: E501
        'rating_sp_dates': 'ratingSpDates',  # noqa: E501
        'rating_sp_values': 'ratingSpValues',  # noqa: E501
        'recovery_percentage': 'recoveryPercentage',  # noqa: E501
        'redemption_date': 'redemptionDate',  # noqa: E501
        'redemption_opt': 'redemptionOpt',  # noqa: E501
        'redemption_price': 'redemptionPrice',  # noqa: E501
        'reinstated_date': 'reinstatedDate',  # noqa: E501
        'reset_delay': 'resetDelay',  # noqa: E501
        'reset_freq': 'resetFreq',  # noqa: E501
        'ref_index': 'refIndex',  # noqa: E501
        'secondary_to_vendor_flag': 'secondaryToVendorFlag',  # noqa: E501
        'sector': 'sector',  # noqa: E501
        'sector_barclay1': 'sectorBarclay1',  # noqa: E501
        'sector_barclay2': 'sectorBarclay2',  # noqa: E501
        'sector_barclay3': 'sectorBarclay3',  # noqa: E501
        'sector_barclay4': 'sectorBarclay4',  # noqa: E501
        'sector_def': 'sectorDef',  # noqa: E501
        'sector_industry': 'sectorIndustry',  # noqa: E501
        'sector_main': 'sectorMain',  # noqa: E501
        'sector_merrill1': 'sectorMerrill1',  # noqa: E501
        'sector_merrill2': 'sectorMerrill2',  # noqa: E501
        'sector_merrill3': 'sectorMerrill3',  # noqa: E501
        'sector_merrill4': 'sectorMerrill4',  # noqa: E501
        'sector_sub_group': 'sectorSubGroup',  # noqa: E501
        'sink_amts': 'sinkAmts',  # noqa: E501
        'sink_dates': 'sinkDates',  # noqa: E501
        'spread': 'spread',  # noqa: E501
        'state': 'state',  # noqa: E501
        'status': 'status',  # noqa: E501
        'status_dates': 'statusDates',  # noqa: E501
        'status_values': 'statusValues',  # noqa: E501
        'step_cash_rates': 'stepCashRates',  # noqa: E501
        'step_coupon_dates': 'stepCouponDates',  # noqa: E501
        'step_coupons': 'stepCoupons',  # noqa: E501
        'step_pik_rates': 'stepPikRates',  # noqa: E501
        'vendor_coverage_date': 'vendorCoverageDate',  # noqa: E501
        'v_rdn_flag': 'vRDNFlag',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, security_type, *args, **kwargs):  # noqa: E501
        """SMBondFields - a model defined in OpenAPI

        Args:
            security_type (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            _144a_flag (bool): [optional]  # noqa: E501
            aperiodic_multipliers ([float]): [optional]  # noqa: E501
            aperiodic_reset_dates ([str]): [optional]  # noqa: E501
            aperiodic_spreads ([float]): [optional]  # noqa: E501
            business_day_conv (str): [optional]  # noqa: E501
            call_announced_date (str): [optional]  # noqa: E501
            call_dates ([str]): [optional]  # noqa: E501
            call_freq (str): [optional]  # noqa: E501
            call_notice_days (int): [optional]  # noqa: E501
            call_prices ([float]): [optional]  # noqa: E501
            cash_rate (float): [optional]  # noqa: E501
            cognity (str): [optional]  # noqa: E501
            conversion_identifier (str): [optional]  # noqa: E501
            conversion_ratio (float): [optional]  # noqa: E501
            conversion_type (str): [optional]  # noqa: E501
            convertible_flag (bool): [optional]  # noqa: E501
            country (str): [optional]  # noqa: E501
            coupon (float): [optional]  # noqa: E501
            coupon_type (str): [optional]  # noqa: E501
            credit_spread_adjustment_single (float): [optional]  # noqa: E501
            currency (str): [optional]  # noqa: E501
            day_count_basis (str): [optional]  # noqa: E501
            defaulted_date (str): [optional]  # noqa: E501
            federal_tax_exempt_flag (bool): [optional]  # noqa: E501
            first_pay_date (str): [optional]  # noqa: E501
            first_reset_date (str): [optional]  # noqa: E501
            float_formula (str): [optional]  # noqa: E501
            flt_day_count_basis (str): [optional]  # noqa: E501
            flt_first_pay_date (str): [optional]  # noqa: E501
            flt_pay_freq (str): [optional]  # noqa: E501
            hist_coupon_dates ([str]): [optional]  # noqa: E501
            hist_coupons ([float]): [optional]  # noqa: E501
            hist_rcv_assump_dates ([str]): [optional]  # noqa: E501
            hist_rcv_assump_months ([int]): [optional]  # noqa: E501
            hist_rcv_assump_rates ([float]): [optional]  # noqa: E501
            hist_rcv_assump_target_dates ([str]): [optional]  # noqa: E501
            inflation_type (str): [optional]  # noqa: E501
            issue_date (str): [optional]  # noqa: E501
            issue_name (str): [optional]  # noqa: E501
            issuer_id (str): [optional]  # noqa: E501
            last_modified_source (str): [optional]  # noqa: E501
            last_modified_source_meta (str): [optional]  # noqa: E501
            last_modified_time (str): [optional]  # noqa: E501
            life_cap (float): [optional]  # noqa: E501
            life_floor (float): [optional]  # noqa: E501
            lockout_days (int): [optional]  # noqa: E501
            look_back_days (int): [optional]  # noqa: E501
            make_whole_call_flag (bool): [optional]  # noqa: E501
            make_whole_expire_date (str): [optional]  # noqa: E501
            make_whole_spread (float): [optional]  # noqa: E501
            matrix_dates ([str]): [optional]  # noqa: E501
            matrix_multipliers ([float]): [optional]  # noqa: E501
            matrix_priced_flag (bool): [optional]  # noqa: E501
            matrix_spreads ([float]): [optional]  # noqa: E501
            matrix_use_schedule_flag (bool): [optional]  # noqa: E501
            maturity_date (str): [optional]  # noqa: E501
            maturity_price (float): [optional]  # noqa: E501
            months_to_recovery (float): [optional]  # noqa: E501
            multiplier (float): [optional]  # noqa: E501
            notional_flag (bool): [optional]  # noqa: E501
            observation_shift (int): [optional]  # noqa: E501
            orig_amt_issued (float): [optional]  # noqa: E501
            parent_name (str): [optional]  # noqa: E501
            par_price (float): [optional]  # noqa: E501
            parser_info (str): [optional]  # noqa: E501
            payment_delay (int): [optional]  # noqa: E501
            pay_freq (str): [optional]  # noqa: E501
            period_cap (float): [optional]  # noqa: E501
            period_floor (float): [optional]  # noqa: E501
            pik_exp_date (str): [optional]  # noqa: E501
            pik_rate (int): [optional]  # noqa: E501
            preferred_sec_ex_date_len (int): [optional]  # noqa: E501
            preferred_sec_ex_date_units (str): [optional]  # noqa: E501
            preferred_sec_flag (bool): [optional]  # noqa: E501
            preferred_sec_type (str): [optional]  # noqa: E501
            principal_type (str): [optional]  # noqa: E501
            put_dates ([str]): [optional]  # noqa: E501
            put_notice_days (int): [optional]  # noqa: E501
            put_freq (str): [optional]  # noqa: E501
            put_prices ([float]): [optional]  # noqa: E501
            pvt_placement_flag (bool): [optional]  # noqa: E501
            rating_fitch (str): [optional]  # noqa: E501
            rating_fitch_dates ([str]): [optional]  # noqa: E501
            rating_fitch_values ([str]): [optional]  # noqa: E501
            rating_moodys_dates ([str]): [optional]  # noqa: E501
            rating_moodys_values ([str]): [optional]  # noqa: E501
            rating_sp_dates ([str]): [optional]  # noqa: E501
            rating_sp_values ([str]): [optional]  # noqa: E501
            recovery_percentage (float): [optional]  # noqa: E501
            redemption_date (str): [optional]  # noqa: E501
            redemption_opt (str): [optional]  # noqa: E501
            redemption_price (float): [optional]  # noqa: E501
            reinstated_date (str): [optional]  # noqa: E501
            reset_delay (int): [optional]  # noqa: E501
            reset_freq (str): [optional]  # noqa: E501
            ref_index (str): [optional]  # noqa: E501
            secondary_to_vendor_flag (bool): [optional]  # noqa: E501
            sector (str): [optional]  # noqa: E501
            sector_barclay1 (str): [optional]  # noqa: E501
            sector_barclay2 (str): [optional]  # noqa: E501
            sector_barclay3 (str): [optional]  # noqa: E501
            sector_barclay4 (str): [optional]  # noqa: E501
            sector_def (str): [optional]  # noqa: E501
            sector_industry (str): [optional]  # noqa: E501
            sector_main (str): [optional]  # noqa: E501
            sector_merrill1 (str): [optional]  # noqa: E501
            sector_merrill2 (str): [optional]  # noqa: E501
            sector_merrill3 (str): [optional]  # noqa: E501
            sector_merrill4 (str): [optional]  # noqa: E501
            sector_sub_group (str): [optional]  # noqa: E501
            sink_amts ([float]): [optional]  # noqa: E501
            sink_dates ([str]): [optional]  # noqa: E501
            spread (float): [optional]  # noqa: E501
            state (str): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            status_dates ([str]): [optional]  # noqa: E501
            status_values ([str]): [optional]  # noqa: E501
            step_cash_rates ([float]): [optional]  # noqa: E501
            step_coupon_dates ([str]): [optional]  # noqa: E501
            step_coupons ([float]): [optional]  # noqa: E501
            step_pik_rates ([float]): [optional]  # noqa: E501
            vendor_coverage_date (str): [optional]  # noqa: E501
            v_rdn_flag (bool): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'security_type': security_type,
        }
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              SMFields,
          ],
          'oneOf': [
          ],
        }
