# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v3:[pa,spar,vault,pub,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class OptimalPortfolio(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acct_name': 'str',
        'exclude_zero': 'bool',
        'archive_date': 'str',
        'if_acct_exists': 'str',
        'if_ofdb_date_exists': 'str'
    }

    attribute_map = {
        'acct_name': 'acctName',
        'exclude_zero': 'excludeZero',
        'archive_date': 'archiveDate',
        'if_acct_exists': 'ifAcctExists',
        'if_ofdb_date_exists': 'ifOfdbDateExists'
    }

    def __init__(self, acct_name=None, exclude_zero=None, archive_date=None, if_acct_exists=None, if_ofdb_date_exists=None, local_vars_configuration=None):  # noqa: E501
        """OptimalPortfolio - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acct_name = None
        self._exclude_zero = None
        self._archive_date = None
        self._if_acct_exists = None
        self._if_ofdb_date_exists = None
        self.discriminator = None

        if acct_name is not None:
            self.acct_name = acct_name
        if exclude_zero is not None:
            self.exclude_zero = exclude_zero
        if archive_date is not None:
            self.archive_date = archive_date
        if if_acct_exists is not None:
            self.if_acct_exists = if_acct_exists
        if if_ofdb_date_exists is not None:
            self.if_ofdb_date_exists = if_ofdb_date_exists

    @property
    def acct_name(self):
        """Gets the acct_name of this OptimalPortfolio.  # noqa: E501

        Account path  # noqa: E501

        :return: The acct_name of this OptimalPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._acct_name

    @acct_name.setter
    def acct_name(self, acct_name):
        """Sets the acct_name of this OptimalPortfolio.

        Account path  # noqa: E501

        :param acct_name: The acct_name of this OptimalPortfolio.  # noqa: E501
        :type: str
        """

        self._acct_name = acct_name

    @property
    def exclude_zero(self):
        """Gets the exclude_zero of this OptimalPortfolio.  # noqa: E501

        Exclude zero  # noqa: E501

        :return: The exclude_zero of this OptimalPortfolio.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_zero

    @exclude_zero.setter
    def exclude_zero(self, exclude_zero):
        """Sets the exclude_zero of this OptimalPortfolio.

        Exclude zero  # noqa: E501

        :param exclude_zero: The exclude_zero of this OptimalPortfolio.  # noqa: E501
        :type: bool
        """

        self._exclude_zero = exclude_zero

    @property
    def archive_date(self):
        """Gets the archive_date of this OptimalPortfolio.  # noqa: E501

        Archive date  # noqa: E501

        :return: The archive_date of this OptimalPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._archive_date

    @archive_date.setter
    def archive_date(self, archive_date):
        """Sets the archive_date of this OptimalPortfolio.

        Archive date  # noqa: E501

        :param archive_date: The archive_date of this OptimalPortfolio.  # noqa: E501
        :type: str
        """

        self._archive_date = archive_date

    @property
    def if_acct_exists(self):
        """Gets the if_acct_exists of this OptimalPortfolio.  # noqa: E501

        Archive action if account exists  # noqa: E501

        :return: The if_acct_exists of this OptimalPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._if_acct_exists

    @if_acct_exists.setter
    def if_acct_exists(self, if_acct_exists):
        """Sets the if_acct_exists of this OptimalPortfolio.

        Archive action if account exists  # noqa: E501

        :param if_acct_exists: The if_acct_exists of this OptimalPortfolio.  # noqa: E501
        :type: str
        """
        allowed_values = ["abort", "overwrite", "appendDate"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and if_acct_exists not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `if_acct_exists` ({0}), must be one of {1}"  # noqa: E501
                .format(if_acct_exists, allowed_values)
            )

        self._if_acct_exists = if_acct_exists

    @property
    def if_ofdb_date_exists(self):
        """Gets the if_ofdb_date_exists of this OptimalPortfolio.  # noqa: E501

        Action if ofdb date exists  # noqa: E501

        :return: The if_ofdb_date_exists of this OptimalPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._if_ofdb_date_exists

    @if_ofdb_date_exists.setter
    def if_ofdb_date_exists(self, if_ofdb_date_exists):
        """Sets the if_ofdb_date_exists of this OptimalPortfolio.

        Action if ofdb date exists  # noqa: E501

        :param if_ofdb_date_exists: The if_ofdb_date_exists of this OptimalPortfolio.  # noqa: E501
        :type: str
        """
        allowed_values = ["abort", "replaceDate", "appendSecurities"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and if_ofdb_date_exists not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `if_ofdb_date_exists` ({0}), must be one of {1}"  # noqa: E501
                .format(if_ofdb_date_exists, allowed_values)
            )

        self._if_ofdb_date_exists = if_ofdb_date_exists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimalPortfolio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimalPortfolio):
            return True

        return self.to_dict() != other.to_dict()
