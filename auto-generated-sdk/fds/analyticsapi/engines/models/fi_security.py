# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class FISecurity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calc_from_method': 'str',
        'calc_from_value': 'float',
        'face': 'float',
        'symbol': 'str',
        'settlement_date': 'str',
        'discount_curve': 'str'
    }

    attribute_map = {
        'calc_from_method': 'calcFromMethod',
        'calc_from_value': 'calcFromValue',
        'face': 'face',
        'symbol': 'symbol',
        'settlement_date': 'settlementDate',
        'discount_curve': 'discountCurve'
    }

    def __init__(self, calc_from_method=None, calc_from_value=None, face=None, symbol=None, settlement_date=None, discount_curve=None, local_vars_configuration=None):  # noqa: E501
        """FISecurity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._calc_from_method = None
        self._calc_from_value = None
        self._face = None
        self._symbol = None
        self._settlement_date = None
        self._discount_curve = None
        self.discriminator = None

        self.calc_from_method = calc_from_method
        self.calc_from_value = calc_from_value
        self.face = face
        self.symbol = symbol
        self.settlement_date = settlement_date
        self.discount_curve = discount_curve

    @property
    def calc_from_method(self):
        """Gets the calc_from_method of this FISecurity.  # noqa: E501


        :return: The calc_from_method of this FISecurity.  # noqa: E501
        :rtype: str
        """
        return self._calc_from_method

    @calc_from_method.setter
    def calc_from_method(self, calc_from_method):
        """Sets the calc_from_method of this FISecurity.


        :param calc_from_method: The calc_from_method of this FISecurity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and calc_from_method is None:  # noqa: E501
            raise ValueError("Invalid value for `calc_from_method`, must not be `None`")  # noqa: E501

        self._calc_from_method = calc_from_method

    @property
    def calc_from_value(self):
        """Gets the calc_from_value of this FISecurity.  # noqa: E501


        :return: The calc_from_value of this FISecurity.  # noqa: E501
        :rtype: float
        """
        return self._calc_from_value

    @calc_from_value.setter
    def calc_from_value(self, calc_from_value):
        """Sets the calc_from_value of this FISecurity.


        :param calc_from_value: The calc_from_value of this FISecurity.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and calc_from_value is None:  # noqa: E501
            raise ValueError("Invalid value for `calc_from_value`, must not be `None`")  # noqa: E501

        self._calc_from_value = calc_from_value

    @property
    def face(self):
        """Gets the face of this FISecurity.  # noqa: E501


        :return: The face of this FISecurity.  # noqa: E501
        :rtype: float
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this FISecurity.


        :param face: The face of this FISecurity.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and face is None:  # noqa: E501
            raise ValueError("Invalid value for `face`, must not be `None`")  # noqa: E501

        self._face = face

    @property
    def symbol(self):
        """Gets the symbol of this FISecurity.  # noqa: E501


        :return: The symbol of this FISecurity.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this FISecurity.


        :param symbol: The symbol of this FISecurity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def settlement_date(self):
        """Gets the settlement_date of this FISecurity.  # noqa: E501


        :return: The settlement_date of this FISecurity.  # noqa: E501
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """Sets the settlement_date of this FISecurity.


        :param settlement_date: The settlement_date of this FISecurity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and settlement_date is None:  # noqa: E501
            raise ValueError("Invalid value for `settlement_date`, must not be `None`")  # noqa: E501

        self._settlement_date = settlement_date

    @property
    def discount_curve(self):
        """Gets the discount_curve of this FISecurity.  # noqa: E501


        :return: The discount_curve of this FISecurity.  # noqa: E501
        :rtype: str
        """
        return self._discount_curve

    @discount_curve.setter
    def discount_curve(self, discount_curve):
        """Sets the discount_curve of this FISecurity.


        :param discount_curve: The discount_curve of this FISecurity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and discount_curve is None:  # noqa: E501
            raise ValueError("Invalid value for `discount_curve`, must not be `None`")  # noqa: E501

        self._discount_curve = discount_curve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FISecurity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FISecurity):
            return True

        return self.to_dict() != other.to_dict()
