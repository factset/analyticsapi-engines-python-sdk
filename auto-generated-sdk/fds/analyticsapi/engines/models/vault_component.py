# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class VaultComponent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account': 'VaultIdentifier',
        'benchmark': 'VaultIdentifier',
        'currencyisocode': 'str',
        'dates': 'VaultDateParameters',
        'snapshot': 'bool',
        'name': 'str',
        'category': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account': 'account',
        'benchmark': 'benchmark',
        'currencyisocode': 'currencyisocode',
        'dates': 'dates',
        'snapshot': 'snapshot',
        'name': 'name',
        'category': 'category'
    }

    def __init__(self, id=None, account=None, benchmark=None, currencyisocode=None, dates=None, snapshot=None, name=None, category=None, local_vars_configuration=None):  # noqa: E501
        """VaultComponent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account = None
        self._benchmark = None
        self._currencyisocode = None
        self._dates = None
        self._snapshot = None
        self._name = None
        self._category = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account is not None:
            self.account = account
        if benchmark is not None:
            self.benchmark = benchmark
        if currencyisocode is not None:
            self.currencyisocode = currencyisocode
        if dates is not None:
            self.dates = dates
        if snapshot is not None:
            self.snapshot = snapshot
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category

    @property
    def id(self):
        """Gets the id of this VaultComponent.  # noqa: E501


        :return: The id of this VaultComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VaultComponent.


        :param id: The id of this VaultComponent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account(self):
        """Gets the account of this VaultComponent.  # noqa: E501


        :return: The account of this VaultComponent.  # noqa: E501
        :rtype: VaultIdentifier
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this VaultComponent.


        :param account: The account of this VaultComponent.  # noqa: E501
        :type: VaultIdentifier
        """

        self._account = account

    @property
    def benchmark(self):
        """Gets the benchmark of this VaultComponent.  # noqa: E501


        :return: The benchmark of this VaultComponent.  # noqa: E501
        :rtype: VaultIdentifier
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this VaultComponent.


        :param benchmark: The benchmark of this VaultComponent.  # noqa: E501
        :type: VaultIdentifier
        """

        self._benchmark = benchmark

    @property
    def currencyisocode(self):
        """Gets the currencyisocode of this VaultComponent.  # noqa: E501


        :return: The currencyisocode of this VaultComponent.  # noqa: E501
        :rtype: str
        """
        return self._currencyisocode

    @currencyisocode.setter
    def currencyisocode(self, currencyisocode):
        """Sets the currencyisocode of this VaultComponent.


        :param currencyisocode: The currencyisocode of this VaultComponent.  # noqa: E501
        :type: str
        """

        self._currencyisocode = currencyisocode

    @property
    def dates(self):
        """Gets the dates of this VaultComponent.  # noqa: E501


        :return: The dates of this VaultComponent.  # noqa: E501
        :rtype: VaultDateParameters
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this VaultComponent.


        :param dates: The dates of this VaultComponent.  # noqa: E501
        :type: VaultDateParameters
        """

        self._dates = dates

    @property
    def snapshot(self):
        """Gets the snapshot of this VaultComponent.  # noqa: E501


        :return: The snapshot of this VaultComponent.  # noqa: E501
        :rtype: bool
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this VaultComponent.


        :param snapshot: The snapshot of this VaultComponent.  # noqa: E501
        :type: bool
        """

        self._snapshot = snapshot

    @property
    def name(self):
        """Gets the name of this VaultComponent.  # noqa: E501

        Component name.  # noqa: E501

        :return: The name of this VaultComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VaultComponent.

        Component name.  # noqa: E501

        :param name: The name of this VaultComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this VaultComponent.  # noqa: E501

        Component category.  # noqa: E501

        :return: The category of this VaultComponent.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this VaultComponent.

        Component category.  # noqa: E501

        :param category: The category of this VaultComponent.  # noqa: E501
        :type: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultComponent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VaultComponent):
            return True

        return self.to_dict() != other.to_dict()
