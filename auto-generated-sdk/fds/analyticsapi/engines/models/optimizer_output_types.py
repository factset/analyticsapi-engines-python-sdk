# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class OptimizerOutputTypes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trades': 'OptimizerTradesList',
        'optimal': 'OptimizerOptimalHoldings',
        'account': 'OptimalPortfolio'
    }

    attribute_map = {
        'trades': 'trades',
        'optimal': 'optimal',
        'account': 'account'
    }

    def __init__(self, trades=None, optimal=None, account=None, local_vars_configuration=None):  # noqa: E501
        """OptimizerOutputTypes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trades = None
        self._optimal = None
        self._account = None
        self.discriminator = None

        if trades is not None:
            self.trades = trades
        if optimal is not None:
            self.optimal = optimal
        if account is not None:
            self.account = account

    @property
    def trades(self):
        """Gets the trades of this OptimizerOutputTypes.  # noqa: E501


        :return: The trades of this OptimizerOutputTypes.  # noqa: E501
        :rtype: OptimizerTradesList
        """
        return self._trades

    @trades.setter
    def trades(self, trades):
        """Sets the trades of this OptimizerOutputTypes.


        :param trades: The trades of this OptimizerOutputTypes.  # noqa: E501
        :type: OptimizerTradesList
        """

        self._trades = trades

    @property
    def optimal(self):
        """Gets the optimal of this OptimizerOutputTypes.  # noqa: E501


        :return: The optimal of this OptimizerOutputTypes.  # noqa: E501
        :rtype: OptimizerOptimalHoldings
        """
        return self._optimal

    @optimal.setter
    def optimal(self, optimal):
        """Sets the optimal of this OptimizerOutputTypes.


        :param optimal: The optimal of this OptimizerOutputTypes.  # noqa: E501
        :type: OptimizerOptimalHoldings
        """

        self._optimal = optimal

    @property
    def account(self):
        """Gets the account of this OptimizerOutputTypes.  # noqa: E501


        :return: The account of this OptimizerOutputTypes.  # noqa: E501
        :rtype: OptimalPortfolio
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OptimizerOutputTypes.


        :param account: The account of this OptimizerOutputTypes.  # noqa: E501
        :type: OptimalPortfolio
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerOutputTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizerOutputTypes):
            return True

        return self.to_dict() != other.to_dict()
