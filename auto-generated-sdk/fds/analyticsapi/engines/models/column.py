# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class Column(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'defaultstatisticsids': 'list[str]',
        'name': 'str',
        'directory': 'str',
        'category': 'str'
    }

    attribute_map = {
        'defaultstatisticsids': 'defaultstatisticsids',
        'name': 'name',
        'directory': 'directory',
        'category': 'category'
    }

    def __init__(self, defaultstatisticsids=None, name=None, directory=None, category=None, local_vars_configuration=None):  # noqa: E501
        """Column - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._defaultstatisticsids = None
        self._name = None
        self._directory = None
        self._category = None
        self.discriminator = None

        if defaultstatisticsids is not None:
            self.defaultstatisticsids = defaultstatisticsids
        if name is not None:
            self.name = name
        if directory is not None:
            self.directory = directory
        if category is not None:
            self.category = category

    @property
    def defaultstatisticsids(self):
        """Gets the defaultstatisticsids of this Column.  # noqa: E501

        Column statistic Id  # noqa: E501

        :return: The defaultstatisticsids of this Column.  # noqa: E501
        :rtype: list[str]
        """
        return self._defaultstatisticsids

    @defaultstatisticsids.setter
    def defaultstatisticsids(self, defaultstatisticsids):
        """Sets the defaultstatisticsids of this Column.

        Column statistic Id  # noqa: E501

        :param defaultstatisticsids: The defaultstatisticsids of this Column.  # noqa: E501
        :type: list[str]
        """

        self._defaultstatisticsids = defaultstatisticsids

    @property
    def name(self):
        """Gets the name of this Column.  # noqa: E501

        Column Name  # noqa: E501

        :return: The name of this Column.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Column.

        Column Name  # noqa: E501

        :param name: The name of this Column.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def directory(self):
        """Gets the directory of this Column.  # noqa: E501

        Column Directory  # noqa: E501

        :return: The directory of this Column.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this Column.

        Column Directory  # noqa: E501

        :param directory: The directory of this Column.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def category(self):
        """Gets the category of this Column.  # noqa: E501

        Column Category  # noqa: E501

        :return: The category of this Column.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Column.

        Column Category  # noqa: E501

        :param category: The category of this Column.  # noqa: E501
        :type: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Column):
            return True

        return self.to_dict() != other.to_dict()
