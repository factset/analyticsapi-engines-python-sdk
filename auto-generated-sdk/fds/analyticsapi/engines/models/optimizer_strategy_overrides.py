# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class OptimizerStrategyOverrides(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'objective': 'str',
        'constraints': 'dict(str, str)',
        'alpha': 'str',
        'transactioncost': 'str',
        'tax': 'str'
    }

    attribute_map = {
        'objective': 'objective',
        'constraints': 'constraints',
        'alpha': 'alpha',
        'transactioncost': 'transactioncost',
        'tax': 'tax'
    }

    def __init__(self, objective=None, constraints=None, alpha=None, transactioncost=None, tax=None, local_vars_configuration=None):  # noqa: E501
        """OptimizerStrategyOverrides - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._objective = None
        self._constraints = None
        self._alpha = None
        self._transactioncost = None
        self._tax = None
        self.discriminator = None

        if objective is not None:
            self.objective = objective
        if constraints is not None:
            self.constraints = constraints
        if alpha is not None:
            self.alpha = alpha
        if transactioncost is not None:
            self.transactioncost = transactioncost
        if tax is not None:
            self.tax = tax

    @property
    def objective(self):
        """Gets the objective of this OptimizerStrategyOverrides.  # noqa: E501

        Objective  # noqa: E501

        :return: The objective of this OptimizerStrategyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this OptimizerStrategyOverrides.

        Objective  # noqa: E501

        :param objective: The objective of this OptimizerStrategyOverrides.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def constraints(self):
        """Gets the constraints of this OptimizerStrategyOverrides.  # noqa: E501

        List of constraints  # noqa: E501

        :return: The constraints of this OptimizerStrategyOverrides.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this OptimizerStrategyOverrides.

        List of constraints  # noqa: E501

        :param constraints: The constraints of this OptimizerStrategyOverrides.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["Disable", "Enable"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(constraints.keys()).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid keys in `constraints` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(constraints.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._constraints = constraints

    @property
    def alpha(self):
        """Gets the alpha of this OptimizerStrategyOverrides.  # noqa: E501

        Alpha  # noqa: E501

        :return: The alpha of this OptimizerStrategyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this OptimizerStrategyOverrides.

        Alpha  # noqa: E501

        :param alpha: The alpha of this OptimizerStrategyOverrides.  # noqa: E501
        :type: str
        """

        self._alpha = alpha

    @property
    def transactioncost(self):
        """Gets the transactioncost of this OptimizerStrategyOverrides.  # noqa: E501

        Transaction cost  # noqa: E501

        :return: The transactioncost of this OptimizerStrategyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._transactioncost

    @transactioncost.setter
    def transactioncost(self, transactioncost):
        """Sets the transactioncost of this OptimizerStrategyOverrides.

        Transaction cost  # noqa: E501

        :param transactioncost: The transactioncost of this OptimizerStrategyOverrides.  # noqa: E501
        :type: str
        """

        self._transactioncost = transactioncost

    @property
    def tax(self):
        """Gets the tax of this OptimizerStrategyOverrides.  # noqa: E501

        Tax  # noqa: E501

        :return: The tax of this OptimizerStrategyOverrides.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OptimizerStrategyOverrides.

        Tax  # noqa: E501

        :param tax: The tax of this OptimizerStrategyOverrides.  # noqa: E501
        :type: str
        """

        self._tax = tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizerStrategyOverrides):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptimizerStrategyOverrides):
            return True

        return self.to_dict() != other.to_dict()
