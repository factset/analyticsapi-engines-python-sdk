# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v3:[pa,spar,vault,pub,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class Optimization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'risk_model_date': 'str',
        'backtest_date': 'str',
        'cashflow': 'str'
    }

    attribute_map = {
        'risk_model_date': 'riskModelDate',
        'backtest_date': 'backtestDate',
        'cashflow': 'cashflow'
    }

    def __init__(self, risk_model_date=None, backtest_date=None, cashflow=None, local_vars_configuration=None):  # noqa: E501
        """Optimization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._risk_model_date = None
        self._backtest_date = None
        self._cashflow = None
        self.discriminator = None

        if risk_model_date is not None:
            self.risk_model_date = risk_model_date
        if backtest_date is not None:
            self.backtest_date = backtest_date
        if cashflow is not None:
            self.cashflow = cashflow

    @property
    def risk_model_date(self):
        """Gets the risk_model_date of this Optimization.  # noqa: E501

        Risk model date  # noqa: E501

        :return: The risk_model_date of this Optimization.  # noqa: E501
        :rtype: str
        """
        return self._risk_model_date

    @risk_model_date.setter
    def risk_model_date(self, risk_model_date):
        """Sets the risk_model_date of this Optimization.

        Risk model date  # noqa: E501

        :param risk_model_date: The risk_model_date of this Optimization.  # noqa: E501
        :type: str
        """

        self._risk_model_date = risk_model_date

    @property
    def backtest_date(self):
        """Gets the backtest_date of this Optimization.  # noqa: E501

        Backtest date  # noqa: E501

        :return: The backtest_date of this Optimization.  # noqa: E501
        :rtype: str
        """
        return self._backtest_date

    @backtest_date.setter
    def backtest_date(self, backtest_date):
        """Sets the backtest_date of this Optimization.

        Backtest date  # noqa: E501

        :param backtest_date: The backtest_date of this Optimization.  # noqa: E501
        :type: str
        """

        self._backtest_date = backtest_date

    @property
    def cashflow(self):
        """Gets the cashflow of this Optimization.  # noqa: E501

        Cash flow  # noqa: E501

        :return: The cashflow of this Optimization.  # noqa: E501
        :rtype: str
        """
        return self._cashflow

    @cashflow.setter
    def cashflow(self, cashflow):
        """Sets the cashflow of this Optimization.

        Cash flow  # noqa: E501

        :param cashflow: The cashflow of this Optimization.  # noqa: E501
        :type: str
        """

        self._cashflow = cashflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Optimization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Optimization):
            return True

        return self.to_dict() != other.to_dict()
