# coding: utf-8

"""
    Engines API

    Allow clients to fetch Analytics through APIs.  # noqa: E501

    The version of the OpenAPI document: v3:[pa,spar,vault,pub,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
    Contact: analytics.api.support@factset.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fds.analyticsapi.engines.configuration import Configuration


class CalculationMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contentorganization': 'str',
        'contenttype': 'str'
    }

    attribute_map = {
        'contentorganization': 'contentorganization',
        'contenttype': 'contenttype'
    }

    def __init__(self, contentorganization='SimplifiedRow', contenttype='Json', local_vars_configuration=None):  # noqa: E501
        """CalculationMeta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contentorganization = None
        self._contenttype = None
        self.discriminator = None

        if contentorganization is not None:
            self.contentorganization = contentorganization
        if contenttype is not None:
            self.contenttype = contenttype

    @property
    def contentorganization(self):
        """Gets the contentorganization of this CalculationMeta.  # noqa: E501


        :return: The contentorganization of this CalculationMeta.  # noqa: E501
        :rtype: str
        """
        return self._contentorganization

    @contentorganization.setter
    def contentorganization(self, contentorganization):
        """Sets the contentorganization of this CalculationMeta.


        :param contentorganization: The contentorganization of this CalculationMeta.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Row", "Column", "SimplifiedRow"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and contentorganization not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `contentorganization` ({0}), must be one of {1}"  # noqa: E501
                .format(contentorganization, allowed_values)
            )

        self._contentorganization = contentorganization

    @property
    def contenttype(self):
        """Gets the contenttype of this CalculationMeta.  # noqa: E501


        :return: The contenttype of this CalculationMeta.  # noqa: E501
        :rtype: str
        """
        return self._contenttype

    @contenttype.setter
    def contenttype(self, contenttype):
        """Sets the contenttype of this CalculationMeta.


        :param contenttype: The contenttype of this CalculationMeta.  # noqa: E501
        :type: str
        """
        allowed_values = ["Json", "Binary"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and contenttype not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `contenttype` ({0}), must be one of {1}"  # noqa: E501
                .format(contenttype, allowed_values)
            )

        self._contenttype = contenttype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculationMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalculationMeta):
            return True

        return self.to_dict() != other.to_dict()
